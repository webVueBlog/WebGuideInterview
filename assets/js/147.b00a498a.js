(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{739:function(v,_,i){"use strict";i.r(_);var l=i(6),t=Object(l.a)({},(function(){var v=this,_=v.$createElement,i=v._self._c||_;return i("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[i("h2",{attrs:{id:"从浏览器地址栏输入url到显示页面的步骤"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#从浏览器地址栏输入url到显示页面的步骤"}},[v._v("#")]),v._v(" 从浏览器地址栏输入url到显示页面的步骤")]),v._v(" "),i("p",[v._v("浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；")]),v._v(" "),i("p",[v._v("服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；")]),v._v(" "),i("p",[v._v("浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；")]),v._v(" "),i("p",[v._v("载入解析到的资源文件，渲染页面，完成。")]),v._v(" "),i("h2",{attrs:{id:"详细版"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#详细版"}},[v._v("#")]),v._v(" 详细版")]),v._v(" "),i("ul",[i("li",[v._v("在浏览器地址栏输入URL")]),v._v(" "),i("li",[v._v("浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤\n"),i("ul",[i("li",[v._v("如果资源未缓存，发起新请求")]),v._v(" "),i("li",[v._v("如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。")]),v._v(" "),i("li",[v._v("检验新鲜通常有两个HTTP头进行控制Expires和Cache-Control：\n"),i("ul",[i("li",[v._v("HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期")]),v._v(" "),i("li",[v._v("HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间")])])])])]),v._v(" "),i("li",[v._v("浏览器解析URL获取协议，主机，端口，path")]),v._v(" "),i("li",[v._v("浏览器组装一个HTTP（GET）请求报文")]),v._v(" "),i("li",[v._v("浏览器获取主机ip地址，过程如下：\n"),i("ul",[i("li",[v._v("浏览器缓存")]),v._v(" "),i("li",[v._v("本机缓存")]),v._v(" "),i("li",[v._v("hosts文件")]),v._v(" "),i("li",[v._v("路由器缓存")]),v._v(" "),i("li",[v._v("ISP DNS缓存")]),v._v(" "),i("li",[v._v("DNS递归查询（可能存在负载均衡导致每次IP不一样）")])])]),v._v(" "),i("li",[v._v("打开一个socket与目标IP地址，端口建立TCP链接，三次握手如下：\n"),i("ul",[i("li",[v._v("客户端发送一个TCP的SYN=1，Seq=X的包到服务器端口")]),v._v(" "),i("li",[v._v("服务器发回SYN=1， ACK=X+1， Seq=Y的响应包")]),v._v(" "),i("li",[v._v("客户端发送ACK=Y+1， Seq=Z")])])]),v._v(" "),i("li",[v._v("TCP链接建立后发送HTTP请求")]),v._v(" "),i("li",[v._v("服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序")]),v._v(" "),i("li",[v._v("服务器检查HTTP请求头是否包含缓存验证信息如果验证缓存新鲜，返回304等对应状态码")]),v._v(" "),i("li",[v._v("处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作")]),v._v(" "),i("li",[v._v("服务器将响应报文通过TCP连接发送回浏览器")]),v._v(" "),i("li",[v._v("浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下：\n"),i("ul",[i("li",[v._v("主动方发送Fin=1， Ack=Z， Seq= X报文")]),v._v(" "),i("li",[v._v("被动方发送ACK=X+1， Seq=Z报文")]),v._v(" "),i("li",[v._v("被动方发送Fin=1， ACK=X， Seq=Y报文")]),v._v(" "),i("li",[v._v("主动方发送ACK=Y， Seq=X报文")])])]),v._v(" "),i("li",[v._v("浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同")]),v._v(" "),i("li",[v._v("如果资源可缓存，进行缓存")]),v._v(" "),i("li",[v._v("对响应进行解码（例如gzip压缩）")]),v._v(" "),i("li",[v._v("根据资源类型决定如何处理（假设资源为HTML文档）")]),v._v(" "),i("li",[v._v("解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本，这些操作没有严格的先后顺序，以下分别解释")]),v._v(" "),i("li",[v._v("构建DOM树：\n"),i("ul",[i("li",[v._v("Tokenizing：根据HTML规范将字符流解析为标记")]),v._v(" "),i("li",[v._v("Lexing：词法分析将标记转换为对象并定义属性和规则")]),v._v(" "),i("li",[v._v("DOM construction：根据HTML标记关系将对象组成DOM树")])])]),v._v(" "),i("li",[v._v("解析过程中遇到图片、样式表、js文件，启动下载")]),v._v(" "),i("li",[v._v("构建CSSOM树：\n"),i("ul",[i("li",[v._v("Tokenizing：字符流转换为标记流")]),v._v(" "),i("li",[v._v("Node：根据标记创建节点")]),v._v(" "),i("li",[v._v("CSSOM：节点创建CSSOM树")])])]),v._v(" "),i("li",[v._v("根据DOM树和CSSOM树构建渲染树 (opens new window):\n"),i("ul",[i("li",[v._v("从DOM树的根节点遍历所有可见节点，不可见节点包括：1）script,meta这样本身不可见的标签。2)被css隐藏的节点，如display: none")]),v._v(" "),i("li",[v._v("对每一个可见节点，找到恰当的CSSOM规则并应用")]),v._v(" "),i("li",[v._v("发布可视节点的内容和计算样式")])])]),v._v(" "),i("li",[v._v("js解析如下：\n"),i("ul",[i("li",[v._v("浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时document.readystate为loading")]),v._v(" "),i("li",[v._v("HTML解析器遇到没有async和defer的script时，将他们添加到文档中，然后执行行内或外部脚本。这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停。这样就可以用document.write()把文本插入到输入流中。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容")]),v._v(" "),i("li",[v._v("当解析器遇到设置了async属性的script时，开始下载脚本并继续解析文档。脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载。异步脚本禁止使用document.write()，它们可以访问自己script和之前的文档元素")]),v._v(" "),i("li",[v._v("当文档完成解析，document.readState变成interactive")]),v._v(" "),i("li",[v._v("所有defer脚本会按照在文档出现的顺序执行，延迟脚本能访问完整文档树，禁止使用document.write()")]),v._v(" "),i("li",[v._v("浏览器在Document对象上触发DOMContentLoaded事件")]),v._v(" "),i("li",[v._v("此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，document.readState变为complete，window触发load事件")])])]),v._v(" "),i("li",[v._v("显示页面（HTML解析过程中会逐步显示页面）")])]),v._v(" "),i("h2",{attrs:{id:"详细简版"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#详细简版"}},[v._v("#")]),v._v(" 详细简版")]),v._v(" "),i("p",[v._v("从浏览器接收url到开启网络请求线程（这一部分可以展开浏览器的机制以及进程与线程之间的关系）")]),v._v(" "),i("p",[v._v("开启网络线程到发出一个完整的HTTP请求（这一部分涉及到dns查询，TCP/IP请求，五层因特网协议栈等知识）")]),v._v(" "),i("p",[v._v("从服务器接收到请求到对应后台接收到请求（这一部分可能涉及到负载均衡，安全拦截以及后台内部的处理等等）")]),v._v(" "),i("p",[v._v("后台和前台的HTTP交互（这一部分包括HTTP头部、响应码、报文结构、cookie等知识，可以提下静态资源的cookie优化，以及编码解码，如gzip压缩等）")]),v._v(" "),i("p",[v._v("单独拎出来的缓存问题，HTTP的缓存（这部分包括http缓存头部，ETag，catch-control等）")]),v._v(" "),i("p",[v._v("浏览器接收到HTTP数据包后的解析流程（解析html-词法分析然后解析成dom树、解析css生成css规则树、合并成render树，然后layout、painting渲染、复合图层的合成、GPU绘制、外链资源的处理、loaded和DOMContentLoaded等）")]),v._v(" "),i("p",[v._v("CSS的可视化格式模型（元素的渲染规则，如包含块，控制框，BFC，IFC等概念）")]),v._v(" "),i("p",[v._v("JS引擎解析过程（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）")]),v._v(" "),i("p",[v._v("其它（可以拓展不同的知识模块，如跨域，web安全，hybrid模式等等内容）")])])}),[],!1,null,null,null);_.default=t.exports}}]);