(window.webpackJsonp=window.webpackJsonp||[]).push([[204],{794:function(t,a,v){"use strict";v.r(a);var r=v(6),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"提升"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#提升"}},[t._v("#")]),t._v(" 提升")]),t._v(" "),v("p",[t._v("任何声明在 某个作用域内的变量，都将附属于这个作用域。")]),t._v(" "),v("h3",{attrs:{id:"先有鸡还是先有蛋"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#先有鸡还是先有蛋"}},[t._v("#")]),t._v(" 先有鸡还是先有蛋")]),t._v(" "),v("p",[t._v("直觉上会认为 JavaScript 代码在执行时是由上到下一行一行执行的。但实际上这并不完全 正确")]),t._v(" "),v("h3",{attrs:{id:"编译器再度来袭"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#编译器再度来袭"}},[t._v("#")]),t._v(" 编译器再度来袭")]),t._v(" "),v("p",[t._v("引擎会 在解释 JavaScript 代码之前首先对其进行编译。编译阶段中的一部分工作就是找到所有的 声明，并用合适的作用域将它们关联起来")]),t._v(" "),v("p",[t._v("变量和函数在内的所有声明都会在任何代码被执行前首先 被处理。")]),t._v(" "),v("p",[t._v("变量和函数声明从它们在代码中出现的位置被“移动” 到了最上面。这个过程就叫作提升。")]),t._v(" "),v("p",[t._v("换句话说，先有蛋（声明）后有鸡（赋值）。")]),t._v(" "),v("p",[t._v("函数声明会被提升，但是函数表达式却不会被提升。")]),t._v(" "),v("h3",{attrs:{id:"函数优先"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数优先"}},[t._v("#")]),t._v(" 函数优先")]),t._v(" "),v("p",[t._v("函数声明和变量声明都会被提升。")]),t._v(" "),v("p",[t._v("函数会首先被提升，然后才是变量。")]),t._v(" "),v("p",[t._v("出现在后面的函数声明还是可以覆盖前面的。")]),t._v(" "),v("h3",{attrs:{id:"小结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),v("p",[t._v("声明本身会被提升，而包括函数表达式的赋值在内的赋值操作并不会提升。")])])}),[],!1,null,null,null);a.default=s.exports}}]);